/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id("com.ewerk.gradle.plugins.querydsl") version "1.0.10"
}

def queryDslSourceDirectory = "${layout.buildDirectory.get()}/generated/sources/annotationProcessor/java/main"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation(libs.hibernate.core)
    implementation(libs.jackson.databind)
    implementation(libs.slf4j)
    implementation(libs.log4j.impl)
    implementation(libs.query.dsl.core)
    implementation(
            group: "com.querydsl",
            name: "querydsl-jpa",
            version: "5.1.0",
            classifier: "jakarta"
    )
    implementation(libs.hibernate.envers)
    implementation(libs.jcache)
    implementation(
            group: "org.ehcache",
            name: "ehcache",
            version: "3.10.8",
            classifier: "jakarta"
    )

    runtimeOnly(libs.postgres.driver)
    compileOnly(libs.lombok)
    annotationProcessor(libs.lombok)
    annotationProcessor(libs.jpamodelgen)
    annotationProcessor(
            group: "com.querydsl",
            name: "querydsl-apt",
            version: "5.1.0",
            classifier: "jakarta"
    )
    annotationProcessor(libs.jakarta.persistence.api)

    testImplementation(libs.junit.api)
    testImplementation(libs.junit.params) // если используешь @ParameterizedTest
    testImplementation(libs.assertj.lib)
    testImplementation(libs.testcontainers)

    testRuntimeOnly(libs.junit.engine)
    testCompileOnly(libs.lombok)
    testAnnotationProcessor(libs.lombok)
}

querydsl {
    jpa = true
    querydslSourcesDir = queryDslSourceDirectory
}

sourceSets {
    main {
        java {
            srcDirs += queryDslSourceDirectory
        }
    }
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

compileQuerydsl.dependsOn(clean)

configurations {
    querydsl.extendsFrom implementation, runtimeOnly, compileOnly
    compileOnly {
        extendsFrom annotationProcessor
    }
}

test {
    useJUnitPlatform()
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}
